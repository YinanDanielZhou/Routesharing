System model:

Coordinator 
    - centralized location/blockchain: maintains the consumers and servers table. 
    Initially empty. It receives queries about these two tables.

Server
server initialization: 
    just start the server. Have some place with the list of server ips and port numbers for the consumer steup
server normal case: 
    it receives two types of requests. one is samples from a car. There will be a list/table for each consumer that uses that server. 
    When a sample is received, the sample is added to the corresponding consumer's list (which is maintained locally at the server). 
    The other type of request is reading samples. This is sent by the consumer. 
    It would return samples that have not been sent yet to the consumer (i.e., a sample is sent once and only once to the consumer). 
    If a sample is sent, then it can be removed from the server's list/table.

Consumer:
consumer initialization: 
    pick random parameters for (number of servers s, compensation, the frequency of samples). 
    Then, s servers are picked at random from the pool of servers defined in the previous server initialization step. 
    The information about the parameters are sent to the coordinator and added as an entry in the cosumers table. 
    And the s servers' information is added as s entries in the servers table.
consumer normal-case: 
    periodically, the samples are pulled from the corresponding servers. 
    They are aggregated at the consumer. And then, compensation is distributed. 
    This can be modeled as a message to the coordinator (potentially triggering a smart contract if it is a permissionless blockchain.)
    
Car:
car initialization: 
    when a car joins (picks a random privacy sensitivity), it communicates with the coordinator. 
    It reads the consumers and servers tables. For each record in consumers table, it would decide if it can join or not based on the model.
car normal-case operation: 
    continuously, generate data records about the location. 
    For each generated record, and for each corresponding consumer, send it to a uniformily-randomly-selected server associated with the approved consumers.